-- Function: cst.pro_mcdata_collect_day()

-- DROP FUNCTION cst.pro_mcdata_collect_day();

CREATE OR REPLACE FUNCTION cst.pro_mcdata_collect_day()
  RETURNS void AS
$BODY$

	-- ######################################################################
	-- # 过程名称: 性能数据放入新表中
	-- # 功能描述: 从MCDATA_COLLECT_TEMP检索
	-- # 			插入到MCDATA_COLLECT_DAY中
	-- ######################################################################
	 
 DECLARE  
    V_DATAID varchar;                -- 存放DATAID
    V_LOOPTIME varchar(20);              -- 存放统计时间
    SQLCODE INTEGER := 0;   
   MCDATA_COLLECT_CURSOR refcursor;
         -- 存放当前时间
                        
    -- ######################################################################
	-- # 检索COLLECT_PORT_LEVEL_STATISTICS_DAYTEMP中DATAID,统计时间

 	-- ######################################################################
 --select * from CST.COLLECT_PORT_LEVEL_STATISTICS_DAYTEMP ;


	
   V_CURRENTDATE varchar :=to_char(current_timestamp,'YYYY/MM/DD HH24:MI:SS');
       BEGIN 
      
	OPEN MCDATA_COLLECT_CURSOR for SELECT DISTINCT DATAID,SUBSTR(DATA_TIMES,1,10) AS LOOPTIME FROM CST.MCDATA_COLLECT_TEMP where DATA_TIMES < (select  substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),1,4) ||'/'|| substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),6,2) ||'/'|| substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),9,2)|| ' 00:00' from pg_class fetch first 1 rows only);
	--循环游标
	LOOP	    
	        FETCH MCDATA_COLLECT_CURSOR INTO V_DATAID,V_LOOPTIME;	        
	       if not found then 
	         exit; 
		    END IF;	
    -- ######################################################################
	-- # MCDATA_COLLECT_DAY插入
	-- ######################################################################     
	        INSERT INTO CST.MCDATA_COLLECT_DAY
			(DATAID,
			PORT,
			DATA_TIMES,
			KBYTES_TRANSMITTED_PER_SEC,
			KBYTES_RECEIVED_PER_SEC,
			TRANSMITTED_FRAMES_PER_SEC,
			RECEIVED_FRAMES_PER_SEC,
			TRANSMIT_LINK_UTILIZATION,
			RECEIVE_LINK_UTILIZATION,

			AVGKBYTES_RECEIVED_PER_SEC,
			SUMKBYTES_RECEIVED_PER_SEC,
			MAXKBYTES_RECEIVED_PER_SEC,
			MINKBYTES_RECEIVED_PER_SEC,
			AVGKBYTES_TRANSMITTED_PER_SEC,
			SUMKBYTES_TRANSMITTED_PER_SEC,
			MAXKBYTES_TRANSMITTED_PER_SEC,
			MINKBYTES_TRANSMITTED_PER_SEC,
			AVGRECEIVED_FRAMES_PER_SEC,
			SUMRECEIVED_FRAMES_PER_SEC,
			MAXRECEIVED_FRAMES_PER_SEC,
			MINRECEIVED_FRAMES_PER_SEC,
			AVGRECEIVE_LINK_UTILIZATION,
			SUMRECEIVE_LINK_UTILIZATION,
			MAXRECEIVE_LINK_UTILIZATION,
			MINRECEIVE_LINK_UTILIZATION,
			AVGTRANSMIT_LINK_UTILIZATION,
			SUMTRANSMIT_LINK_UTILIZATION,
			MAXTRANSMIT_LINK_UTILIZATION,
			MINTRANSMIT_LINK_UTILIZATION,
			AVGTRANSMITTED_FRAMES_PER_SEC,
			SUMTRANSMITTED_FRAMES_PER_SEC,
			MAXTRANSMITTED_FRAMES_PER_SEC,
			MINTRANSMITTED_FRAMES_PER_SEC
			)
        	SELECT DATAID,
			PORT,
        		V_LOOPTIME,
         		MAX(KBYTES_TRANSMITTED_PER_SEC) AS KBYTES_TRANSMITTED_PER_SEC,
         		MAX(KBYTES_RECEIVED_PER_SEC) AS KBYTES_RECEIVED_PER_SEC,
         		MAX(TRANSMITTED_FRAMES_PER_SEC) AS TRANSMITTED_FRAMES_PER_SEC,
         		MAX(RECEIVED_FRAMES_PER_SEC) AS RECEIVED_FRAMES_PER_SEC,
         		MAX(TRANSMIT_LINK_UTILIZATION) AS TRANSMIT_LINK_UTILIZATION,
         		MAX(RECEIVE_LINK_UTILIZATION) AS RECEIVE_LINK_UTILIZATION,

			AVG(KBYTES_RECEIVED_PER_SEC) AS AVGKBYTES_RECEIVED_PER_SEC,
			SUM(KBYTES_RECEIVED_PER_SEC) AS SUMKBYTES_RECEIVED_PER_SEC,
			MAX(KBYTES_RECEIVED_PER_SEC) AS MAXKBYTES_RECEIVED_PER_SEC,
			MIN(KBYTES_RECEIVED_PER_SEC) AS MINKBYTES_RECEIVED_PER_SEC,
			AVG(KBYTES_TRANSMITTED_PER_SEC) AS AVGKBYTES_TRANSMITTED_PER_SEC,
			SUM(KBYTES_TRANSMITTED_PER_SEC) AS SUMKBYTES_TRANSMITTED_PER_SEC,
			MAX(KBYTES_TRANSMITTED_PER_SEC) AS MAXKBYTES_TRANSMITTED_PER_SEC,
			MIN(KBYTES_TRANSMITTED_PER_SEC) AS MINKBYTES_TRANSMITTED_PER_SEC,
			AVG(RECEIVED_FRAMES_PER_SEC) AS AVGRECEIVED_FRAMES_PER_SEC,
			SUM(RECEIVED_FRAMES_PER_SEC) AS SUMRECEIVED_FRAMES_PER_SEC,
			MAX(RECEIVED_FRAMES_PER_SEC) AS MAXRECEIVED_FRAMES_PER_SEC,
			MIN(RECEIVED_FRAMES_PER_SEC) AS MINRECEIVED_FRAMES_PER_SEC,
			AVG(RECEIVE_LINK_UTILIZATION) AS AVGRECEIVE_LINK_UTILIZATION,
			SUM(RECEIVE_LINK_UTILIZATION) AS SUMRECEIVE_LINK_UTILIZATION,
			MAX(RECEIVE_LINK_UTILIZATION) AS MAXRECEIVE_LINK_UTILIZATION,
			MIN(RECEIVE_LINK_UTILIZATION) AS MINRECEIVE_LINK_UTILIZATION,
			AVG(TRANSMIT_LINK_UTILIZATION) AS AVGTRANSMIT_LINK_UTILIZATION,
			SUM(TRANSMIT_LINK_UTILIZATION) AS SUMTRANSMIT_LINK_UTILIZATION,
			MAX(TRANSMIT_LINK_UTILIZATION) AS MAXTRANSMIT_LINK_UTILIZATION,
			MIN(TRANSMIT_LINK_UTILIZATION) AS MINTRANSMIT_LINK_UTILIZATION,
			AVG(TRANSMITTED_FRAMES_PER_SEC) AS AVGTRANSMITTED_FRAMES_PER_SEC,
			SUM(TRANSMITTED_FRAMES_PER_SEC) AS SUMTRANSMITTED_FRAMES_PER_SEC,
			MAX(TRANSMITTED_FRAMES_PER_SEC) AS MAXTRANSMITTED_FRAMES_PER_SEC,
			MIN(TRANSMITTED_FRAMES_PER_SEC) AS MINTRANSMITTED_FRAMES_PER_SEC
          	FROM CST.MCDATA_COLLECT_TEMP
          	WHERE DATA_TIMES like  V_LOOPTIME||'%' AND DATAID = V_DATAID                  
          	GROUP BY DATAID,PORT;

	    INSERT INTO CST.COLLECT_OBJECT_LIST(DATAID,OBJECT_TYPE,OBJECT_NAME) SELECT DATAID,'MCDATA',PORT FROM CST.MCDATA_COLLECT_TEMP WHERE DATAID=V_DATAID AND PORT NOT IN (SELECT OBJECT_NAME FROM CST.COLLECT_OBJECT_LIST WHERE DATAID = V_DATAID AND OBJECT_TYPE = 'MCDATA')  GROUP BY DATAID,PORT;
	    END LOOP;
	CLOSE MCDATA_COLLECT_CURSOR;
	              
    RETURN ;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION cst.pro_mcdata_collect_day()
  OWNER TO postgres;
--#########################################################################
--#########################################################################
CREATE OR REPLACE FUNCTION cst.pro_mcdata_collect_hour()
  RETURNS void AS
$BODY$

	-- ######################################################################
	-- # 过程名称: 性能数据放入新表中
	-- # 功能描述: 从MCDATA_COLLECT_TEMP检索
	-- # 			插入到MCDATA_COLLECT_HOUR中
	-- ######################################################################
	 
DECLARE  
    V_DATAID varchar;                -- 存放DATAID
    V_LOOPTIME varchar(20);              -- 存放统计时间
    SQLCODE INTEGER := 0;   
    MCDATA_COLLECT_CURSOR refcursor;
         -- 存放当前时间
                        
    -- ######################################################################
	-- # 检索COLLECT_PORT_LEVEL_STATISTICS_DAYTEMP中DATAID,统计时间

 	-- ######################################################################
 --select * from CST.COLLECT_PORT_LEVEL_STATISTICS_DAYTEMP ;


	
   V_CURRENTDATE varchar :=to_char(current_timestamp,'YYYY/MM/DD HH24:MI:SS');
       BEGIN 
      
	OPEN MCDATA_COLLECT_CURSOR for SELECT DISTINCT DATAID,SUBSTR(DATA_TIMES,1,13) AS LOOPTIME FROM CST.MCDATA_COLLECT_TEMP where DATA_TIMES < (select  substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),1,4) ||'/'|| substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),6,2) ||'/'|| substr(to_char(current_timestamp,'YYYY/MM/DD HH24:MI'),9,2)|| ' 00:00' from pg_class fetch first 1 rows only);
	--循环游标
	LOOP	    
	        FETCH MCDATA_COLLECT_CURSOR INTO V_DATAID,V_LOOPTIME;	        
	       if not found then 
	         exit; 
		    END IF;		
    -- ######################################################################
	-- # MCDATA_COLLECT_HOUR插入
	-- ######################################################################     
	        INSERT INTO CST.MCDATA_COLLECT_HOUR
			(DATAID,
			PORT,
			DATA_TIMES,
			KBYTES_TRANSMITTED_PER_SEC,
			KBYTES_RECEIVED_PER_SEC,
			TRANSMITTED_FRAMES_PER_SEC,
			RECEIVED_FRAMES_PER_SEC,
			TRANSMIT_LINK_UTILIZATION,
			RECEIVE_LINK_UTILIZATION,

			AVGKBYTES_RECEIVED_PER_SEC,
			SUMKBYTES_RECEIVED_PER_SEC,
			MAXKBYTES_RECEIVED_PER_SEC,
			MINKBYTES_RECEIVED_PER_SEC,
			AVGKBYTES_TRANSMITTED_PER_SEC,
			SUMKBYTES_TRANSMITTED_PER_SEC,
			MAXKBYTES_TRANSMITTED_PER_SEC,
			MINKBYTES_TRANSMITTED_PER_SEC,
			AVGRECEIVED_FRAMES_PER_SEC,
			SUMRECEIVED_FRAMES_PER_SEC,
			MAXRECEIVED_FRAMES_PER_SEC,
			MINRECEIVED_FRAMES_PER_SEC,
			AVGRECEIVE_LINK_UTILIZATION,
			SUMRECEIVE_LINK_UTILIZATION,
			MAXRECEIVE_LINK_UTILIZATION,
			MINRECEIVE_LINK_UTILIZATION,
			AVGTRANSMIT_LINK_UTILIZATION,
			SUMTRANSMIT_LINK_UTILIZATION,
			MAXTRANSMIT_LINK_UTILIZATION,
			MINTRANSMIT_LINK_UTILIZATION,
			AVGTRANSMITTED_FRAMES_PER_SEC,
			SUMTRANSMITTED_FRAMES_PER_SEC,
			MAXTRANSMITTED_FRAMES_PER_SEC,
			MINTRANSMITTED_FRAMES_PER_SEC
			)
		SELECT DATAID,
			PORT,
        		V_LOOPTIME,
         		MAX(KBYTES_TRANSMITTED_PER_SEC) AS KBYTES_TRANSMITTED_PER_SEC,
         		MAX(KBYTES_RECEIVED_PER_SEC) AS KBYTES_RECEIVED_PER_SEC,
         		MAX(TRANSMITTED_FRAMES_PER_SEC) AS TRANSMITTED_FRAMES_PER_SEC,
         		MAX(RECEIVED_FRAMES_PER_SEC) AS RECEIVED_FRAMES_PER_SEC,
         		MAX(TRANSMIT_LINK_UTILIZATION) AS TRANSMIT_LINK_UTILIZATION,
         		MAX(RECEIVE_LINK_UTILIZATION) AS RECEIVE_LINK_UTILIZATION,

			AVG(KBYTES_RECEIVED_PER_SEC) AS AVGKBYTES_RECEIVED_PER_SEC,
			SUM(KBYTES_RECEIVED_PER_SEC) AS SUMKBYTES_RECEIVED_PER_SEC,
			MAX(KBYTES_RECEIVED_PER_SEC) AS MAXKBYTES_RECEIVED_PER_SEC,
			MIN(KBYTES_RECEIVED_PER_SEC) AS MINKBYTES_RECEIVED_PER_SEC,
			AVG(KBYTES_TRANSMITTED_PER_SEC) AS AVGKBYTES_TRANSMITTED_PER_SEC,
			SUM(KBYTES_TRANSMITTED_PER_SEC) AS SUMKBYTES_TRANSMITTED_PER_SEC,
			MAX(KBYTES_TRANSMITTED_PER_SEC) AS MAXKBYTES_TRANSMITTED_PER_SEC,
			MIN(KBYTES_TRANSMITTED_PER_SEC) AS MINKBYTES_TRANSMITTED_PER_SEC,
			AVG(RECEIVED_FRAMES_PER_SEC) AS AVGRECEIVED_FRAMES_PER_SEC,
			SUM(RECEIVED_FRAMES_PER_SEC) AS SUMRECEIVED_FRAMES_PER_SEC,
			MAX(RECEIVED_FRAMES_PER_SEC) AS MAXRECEIVED_FRAMES_PER_SEC,
			MIN(RECEIVED_FRAMES_PER_SEC) AS MINRECEIVED_FRAMES_PER_SEC,
			AVG(RECEIVE_LINK_UTILIZATION) AS AVGRECEIVE_LINK_UTILIZATION,
			SUM(RECEIVE_LINK_UTILIZATION) AS SUMRECEIVE_LINK_UTILIZATION,
			MAX(RECEIVE_LINK_UTILIZATION) AS MAXRECEIVE_LINK_UTILIZATION,
			MIN(RECEIVE_LINK_UTILIZATION) AS MINRECEIVE_LINK_UTILIZATION,
			AVG(TRANSMIT_LINK_UTILIZATION) AS AVGTRANSMIT_LINK_UTILIZATION,
			SUM(TRANSMIT_LINK_UTILIZATION) AS SUMTRANSMIT_LINK_UTILIZATION,
			MAX(TRANSMIT_LINK_UTILIZATION) AS MAXTRANSMIT_LINK_UTILIZATION,
			MIN(TRANSMIT_LINK_UTILIZATION) AS MINTRANSMIT_LINK_UTILIZATION,
			AVG(TRANSMITTED_FRAMES_PER_SEC) AS AVGTRANSMITTED_FRAMES_PER_SEC,
			SUM(TRANSMITTED_FRAMES_PER_SEC) AS SUMTRANSMITTED_FRAMES_PER_SEC,
			MAX(TRANSMITTED_FRAMES_PER_SEC) AS MAXTRANSMITTED_FRAMES_PER_SEC,
			MIN(TRANSMITTED_FRAMES_PER_SEC) AS MINTRANSMITTED_FRAMES_PER_SEC
          	FROM CST.MCDATA_COLLECT_TEMP
          	WHERE DATA_TIMES like  V_LOOPTIME||'%' AND DATAID = V_DATAID                  
          	GROUP BY DATAID,PORT;
	        
	    END LOOP;
	CLOSE MCDATA_COLLECT_CURSOR;
	              
    RETURN ;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION cst.pro_mcdata_collect_hour()
  OWNER TO postgres;
