<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="com.csebank.lom.model.entity">

  <sql-query name="InvoiceVWDAO.invoiceVWBYEMP">
    <![CDATA[
		SELECT IREQEMP AS NUM,  O.ORGNAME AS IREQEMP,COUNT(IID) AS INVOICENUM ,SUM(IAMOUNT) AS SUMIAMOUNT,
		SUM(CASE WHEN ISTATUS='1'  THEN IAMOUNT  ELSE 0 END) AS  SUMIAMOUNTED ,
		SUM(CASE WHEN ISTATUS='0'  THEN IAMOUNT  ELSE 0 END) AS  UNSUMIAMOUNTED,
		I.IREQEMP AS EIORGSYSCODING
		 FROM INVOICE I,ORGANIZATION O  WHERE I.IREQEMP=O.ORGSYSCODING 

    ]]> 
    </sql-query>
    
     <sql-query name="InvoiceVWDAO.invoiceVWBYYEAR">
    <![CDATA[
		SELECT A.NUM,'' AS IREQEMP, CASE WHEN B.INVOICENUM IS NULL THEN 0 ELSE B.INVOICENUM END AS INVOICENUM,
		 CASE WHEN B.SUMIAMOUNT IS NULL THEN 0 ELSE B.SUMIAMOUNT END AS SUMIAMOUNT,
		  CASE WHEN B.SUMIAMOUNTED IS NULL THEN 0 ELSE B.SUMIAMOUNTED END AS SUMIAMOUNTED,
		   CASE WHEN B.UNSUMIAMOUNTED IS NULL THEN 0 ELSE B.UNSUMIAMOUNTED END AS UNSUMIAMOUNTED,'' AS EIORGSYSCODING FROM  
		(SELECT CID AS NUM FROM CODEDETAIL WHERE CCID = '151') A
		   LEFT OUTER JOIN (
       		 SELECT SUBSTR(IDATE,6,2) AS NUM,
		COUNT(IID) AS INVOICENUM,
		SUM(IAMOUNT) AS SUMIAMOUNT,
		SUM(CASE WHEN ISTATUS='1'  THEN IAMOUNT  ELSE 0 END) AS  SUMIAMOUNTED ,
		SUM(CASE WHEN ISTATUS='0'  THEN IAMOUNT  ELSE 0 END) AS  UNSUMIAMOUNTED
		FROM INVOICE I 
		WHERE SUBSTR(IDATE,1,4) = :iyear
		 GROUP BY SUBSTR(IDATE,6,2)) B ON (A.NUM = B.NUM)
		 ORDER BY A.NUM
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryYM">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,7) as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				0 as lunchcardnum,
				-1 as lunchcardprice,	
				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				where substr(a.edate,1,7)= :edate
				group by substr(a.edate,1,7)
		UNION ALL
				select substr(b.ewldate,1,7) as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				sum(b.lunchcardnum) as lunchcardnum,
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				where substr(b.ewldate,1,7)= :edate
				group by substr(b.ewldate,1,7), b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryY">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,7) as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				0 as lunchcardnum,
				-1 as lunchcardprice,	
				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				where substr(a.edate,1,4)= :edate
				group by substr(a.edate,1,7)
		UNION ALL
				select substr(b.ewldate,1,7) as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				sum(b.lunchcardnum) as lunchcardnum,
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				where substr(b.ewldate,1,4)= :edate
				group by substr(b.ewldate,1,7), b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEatery">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,7) as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				0 as lunchcardnum,
				-1 as lunchcardprice,	
				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				group by substr(a.edate,1,7)
		UNION ALL
				select substr(b.ewldate,1,7) as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				sum(b.lunchcardnum) as lunchcardnum,
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				group by substr(b.ewldate,1,7), b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryYY">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,4) as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				0 as lunchcardnum,
				-1 as lunchcardprice,	
				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				where substr(a.edate,1,4)= :edate
				group by substr(a.edate,1,4)
		UNION ALL
				select substr(b.ewldate,1,4) as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				sum(b.lunchcardnum) as lunchcardnum,
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				where substr(b.ewldate,1,4)= :edate
				group by substr(b.ewldate,1,4), b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryAY">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,4) as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				0 as lunchcardnum,
				-1 as lunchcardprice,	
				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				group by substr(a.edate,1,4)
		UNION ALL
				select substr(b.ewldate,1,4) as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				sum(b.lunchcardnum) as lunchcardnum,
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				group by substr(b.ewldate,1,4), b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryDM">
    <![CDATA[
    	select WLEatery.* from 
		( select concat(edate||'-',rtrim(cast (eid as varchar))) as wldate, (eflavouringcost+eothercost+a.estaplecost) as allcost,eflavouringcost as eflavouringcost, eothercost as eothercost, 
		estaplecost as estaplecost, 

		rtrim(cast(eid as varchar)) as lunchcardname, 
		0 as lunchcardnum,
		-1 as lunchcardprice,		

		0 as incost,
		0 as outcost
		from EATERY a 
		where substr(a.edate,1,7)= :edate
		UNION ALL
		select concat(b.ewldate||'-',rtrim(cast (b.ewlid as varchar))) as wldate, 0 as allcost,0 as eflavouringcost,0 as eothercost, 
		0 as estaplecost, 

		b.lunchcardname as lunchcardname, 
		b.lunchcardnum as lunchcardnum,
		b.LUNCHCARDPRINCE as lunchcardprice,
		0 as incost,
		0 as outcost
		from EWORKINGLUNCH b
		where substr(ewldate,1,7)= :edate
		) as WLEatery
		order by WLEatery.wldate
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryYQ">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度' as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				-1 as lunchcardprice,	
				0 as lunchcardnum,

				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				where (substr(a.edate,1,7)>= :etime_from
				and     substr(a.edate,1,7)<= :etime_to)
				group by rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度'
		UNION ALL
				select rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度' as wldate,0 as allcost,0 as eflavouringcost,0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum) as lunchcardnum,

				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				where (substr(b.ewldate,1,7)>= :etime_from
				and     substr(b.ewldate,1,7)<= :etime_to)
				group by rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度', b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryQ">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,4)||'年'||rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度' as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				-1 as lunchcardprice,	
				0 as lunchcardnum,

				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				group by substr(a.edate,1,4)||'年'||rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度'
		UNION ALL
				select substr(b.ewldate,1,4)||'年'||rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度' as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum) as lunchcardnum,

				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				group by substr(b.ewldate,1,4)||'年'||rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度', b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by WLEatery.wldate
    ]]> 
    </sql-query>
    
    <sql-query name="WorkLunchEateryDAO.workLunchEateryYYY">
    <![CDATA[
		select  WLEatery.wldate as wldate, WLEatery.allcost as allcost, WLEatery.eflavouringcost as eflavouringcost, WLEatery.eothercost as eothercost, WLEatery.estaplecost as estaplecost,
		        
		        WLEatery.lunchcardname,
		        WLEatery.lunchcardnum,
		        WLEatery.lunchcardprice,
		        WLEatery.incost as incost, WLEatery.outcost as outcost
		from 
				(select substr(a.edate,1,4)||'年'||rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度' as wldate, sum(a.eflavouringcost+a.estaplecost+a.eothercost) as allcost,
				sum(a.eflavouringcost) as eflavouringcost, sum(a.eothercost) as eothercost, 
				sum(a.estaplecost) as estaplecost, 
		
				rtrim(''||sum(a.eid)) as lunchcardname, 
				-1 as lunchcardprice,	
				0 as lunchcardnum,

				0 as incost,
				sum(0-(a.eflavouringcost+a.estaplecost+a.eothercost)) as outcost
				from EATERY a 
				where substr(a.edate,1,4) = :edate
				group by substr(a.edate,1,4)||'年'||rtrim(char(1+(Integer(substr(a.edate,6,2))-1)/3))||'季度'
		UNION ALL
				select substr(b.ewldate,1,4)||'年'||rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度' as wldate, 0 as allcost,0 as eflavouringcost, 0 as eothercost, 
				0 as estaplecost, 
		
				b.lunchcardname as lunchcardname, 
				b.LUNCHCARDPRINCE as lunchcardprice,
				sum(b.lunchcardnum) as lunchcardnum,

				sum(b.lunchcardnum*b.lunchcardprince) as incost,
				sum(b.lunchcardnum*b.lunchcardprince) as outcost
				from EWORKINGLUNCH b
				where substr(b.ewldate,1,4) = :edate
				group by substr(b.ewldate,1,4)||'年'||rtrim(char(1+(Integer(substr(b.ewldate,6,2))-1)/3))||'季度', b.lunchcardname, b.LUNCHCARDPRINCE
				) as WLEatery

		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="EentertainmentStatisticsDAO.EentertainmentStatistics">
    <![CDATA[
		select EentertainmentStatistics.*
		from
		(
		select EentertainmentStatistics.edate as edate, EentertainmentStatistics.enumber as enumber, EentertainmentStatistics.eefoodprice  as eefoodprice, 
		EentertainmentStatistics.eedrinkprice  as eedrinkprice, EentertainmentStatistics.eesmokeprice  as eesmokeprice, EentertainmentStatistics.eeotherprice as eeotherprice, EentertainmentStatistics.etotal  as etotal
		from 
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice,
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		group by substr(a.eedate,1,7)
		order by 1
		) as EentertainmentStatistics
		union all
		select '合计'  as edate, sum(EentertainmentStatisticsa.enumber)  as enumber, sum(EentertainmentStatisticsa.eefoodprice) as eefoodprice, 
		sum(EentertainmentStatisticsa.eedrinkprice)  as eedrinkprice, sum(EentertainmentStatisticsa.eesmokeprice) as eesmokeprice,  sum(EentertainmentStatisticsa.EEOTHERPRICE) as eeotherprice,
		sum(EentertainmentStatisticsa.etotal)  as etotal
		from
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice,
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		group by substr(a.eedate,1,7)
		) EentertainmentStatisticsa
		)EentertainmentStatistics
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="EentertainmentStatisticsDAO.EentertainmentStatisticsFT">
    <![CDATA[
		select EentertainmentStatistics.*
		from
		(
		select EentertainmentStatistics.edate as edate, EentertainmentStatistics.enumber as enumber, EentertainmentStatistics.eefoodprice  as eefoodprice, 
		EentertainmentStatistics.eedrinkprice  as eedrinkprice, EentertainmentStatistics.eesmokeprice  as eesmokeprice,EentertainmentStatistics.eeotherprice  as eeotherprice, EentertainmentStatistics.etotal  as etotal
		from 
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)>=:etime_from AND substr(a.eedate,1,7)<=:etime_to
		group by substr(a.eedate,1,7)
		order by 1
		) as EentertainmentStatistics
		union all
		select '合计'  as edate, sum(EentertainmentStatisticsa.enumber)  as enumber, sum(EentertainmentStatisticsa.eefoodprice) as eefoodprice, 
		sum(EentertainmentStatisticsa.eedrinkprice)  as eedrinkprice, sum(EentertainmentStatisticsa.eesmokeprice) as eesmokeprice, sum(EentertainmentStatisticsa.eeotherprice) as eeotherprice, 
		sum(EentertainmentStatisticsa.etotal)  as etotal
		from
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)>=:etime_from AND substr(a.eedate,1,7)<=:etime_to
		group by substr(a.eedate,1,7)
		) EentertainmentStatisticsa
		)EentertainmentStatistics
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="EentertainmentStatisticsDAO.EentertainmentStatisticsF">
    <![CDATA[
		select EentertainmentStatistics.*
		from
		(
		select EentertainmentStatistics.edate as edate, EentertainmentStatistics.enumber as enumber, EentertainmentStatistics.eefoodprice  as eefoodprice, 
		EentertainmentStatistics.eedrinkprice  as eedrinkprice, EentertainmentStatistics.eesmokeprice  as eesmokeprice,EentertainmentStatistics.eeotherprice  as eeotherprice, EentertainmentStatistics.etotal  as etotal
		from 
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)>=:etime_from
		group by substr(a.eedate,1,7)
		order by 1
		) as EentertainmentStatistics
		union all
		select '合计'  as edate, sum(EentertainmentStatisticsa.enumber)  as enumber, sum(EentertainmentStatisticsa.eefoodprice) as eefoodprice, 
		sum(EentertainmentStatisticsa.eedrinkprice)  as eedrinkprice, sum(EentertainmentStatisticsa.eesmokeprice) as eesmokeprice, sum(EentertainmentStatisticsa.eeotherprice) as eeotherprice, 
		sum(EentertainmentStatisticsa.etotal)  as etotal
		from
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)>=:etime_from
		group by substr(a.eedate,1,7)
		) EentertainmentStatisticsa
		)EentertainmentStatistics
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="EentertainmentStatisticsDAO.EentertainmentStatisticsT">
    <![CDATA[
		select EentertainmentStatistics.*
		from
		(
		select EentertainmentStatistics.edate as edate, EentertainmentStatistics.enumber as enumber, EentertainmentStatistics.eefoodprice  as eefoodprice, 
		EentertainmentStatistics.eedrinkprice  as eedrinkprice, EentertainmentStatistics.eesmokeprice  as eesmokeprice,EentertainmentStatistics.eeotherprice  as eeotherprice, EentertainmentStatistics.etotal  as etotal
		from 
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)<=:etime_to
		group by substr(a.eedate,1,7)
		order by 1
		) as EentertainmentStatistics
		union all
		select '合计'  as edate, sum(EentertainmentStatisticsa.enumber)  as enumber, sum(EentertainmentStatisticsa.eefoodprice) as eefoodprice, 
		sum(EentertainmentStatisticsa.eedrinkprice)  as eedrinkprice, sum(EentertainmentStatisticsa.eesmokeprice) as eesmokeprice, sum(EentertainmentStatisticsa.eeotherprice) as eeotherprice, 
		sum(EentertainmentStatisticsa.etotal)  as etotal
		from
		(
		select substr(a.eedate,1,7) as edate, count(a.eedate) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
		sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
		sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
		from EENTERTAINMENT a
		where substr(a.eedate,1,7)<=:etime_to
		group by substr(a.eedate,1,7)
		) EentertainmentStatisticsa
		)EentertainmentStatistics
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="DeptEentertainmentDAO.DeptEentertainment">
    <![CDATA[
		select EEntertainment.*
		from		
		( 
			select cast(a.rid as varchar) as edept, a.rid as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			group by a.rid
			union all
			select '合计' as edept, -1 as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
		) as EEntertainment
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="DeptEentertainmentDAO.DeptEentertainmentFT">
    <![CDATA[
		select EEntertainment.*
		from		
		( 
			select cast(a.rid as varchar) as edept, a.rid as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)>=:etime_from 
			and    substr(a.eedate,1,7)<=:etime_to 
			group by a.rid
			union all
			select '合计' as edept, -1 as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)>=:etime_from 
			and    substr(a.eedate,1,7)<=:etime_to 
		) as EEntertainment
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="DeptEentertainmentDAO.DeptEentertainmentF">
    <![CDATA[
		select EEntertainment.*
		from		
		( 
			select cast(a.rid as varchar) as edept, a.rid as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)>=:etime_from
			group by a.rid
			union all
			select '合计' as edept, -1 as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)>=:etime_from
		) as EEntertainment
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="DeptEentertainmentDAO.DeptEentertainmentT">
    <![CDATA[
		select EEntertainment.*
		from		
		( 
			select cast(a.rid as varchar) as edept, a.rid as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)<=:etime_to 
			group by a.rid
			union all
			select '合计' as edept, -1 as rid, count(a.eeid) as enumber, sum(a.EETABLENUM*a.EETABLEPRICE) as eefoodprice, 
			sum(a.EEDRINKPRICE) as eedrinkprice, sum(a.EESMOKEPRICE) as eesmokeprice, sum(a.EEOTHERPRICE) as eeotherprice, 
			sum(a.EETABLENUM*a.EETABLEPRICE+a.EEDRINKPRICE+a.EESMOKEPRICE+a.EEOTHERPRICE) as etotal
			from EENTERTAINMENT a
			where substr(a.eedate,1,7)<=:etime_to 
		) as EEntertainment
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="GoodsStockDAO.goodsStock">
    <![CDATA[
		select GoodsStock.gid as gid, GoodsStock.giodcode as giodcode, GoodsStock.giodname as giodname, 
		GoodsStock.giodinnum as giodinnum, GoodsStock.giodoutnum as giodoutnum, GoodsStock.giodnum as giodnum, '3' as type
		from
		(SELECT char(max(g.GIODID)) as gid, g.GIODCODE as giodcode, g.GIODNAME as giodname, 
		sum(g.giodinnum-g.giodoutnum) as giodinnum,
		sum(g.giodoutnum) as giodoutnum,
		sum(g.GIODINNUM-g.giodoutnum) as giodnum
		FROM ginoutstockdetail g
		where substr(g.GIODTIME,1,7)=:edate
		and    g.GIODORG=:giodorg
		and	   g.GIODCATEGORY = :giodcategory
		group by g.GIODCODE
		union all
		SELECT '合计' as gid, '' as giodcode, '' as giodname, 
		sum(gg.giodinnum-gg.giodoutnum) as giodinnum,
		sum(gg.giodoutnum) as giodoutnum,
		sum(gg.GIODINNUM-gg.giodoutnum-gg.giodoutnum) as giodnum
		FROM ginoutstockdetail gg
		where substr(gg.GIODTIME,1,7)=:edate
		and    gg.GIODORG=:giodorg
		) as GoodsStock
		order by giodcode desc
    ]]> 
    </sql-query>
    
    <sql-query name="GoodsStockDAO.goodsStockDetail">
    <![CDATA[
		select GoodsStock.gid, GoodsStock.giodcode, GoodsStock.giodname, GoodsStock.giodinnum, GoodsStock.giodoutnum, GoodsStock.giodnum,GoodsStock.type
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(char(g.GIODID))) as gid, g.GIODCODE as giodcode, g.GIODNAME as giodname, g.GIODTYPE as type,
		g.GIODINNUM as giodinnum,
		'0' as giodoutnum, 
		g.GSNUM as giodnum
		FROM ginoutstockdetail g
		where substr(g.GIODTIME,1,7)=:edate
		and    g.GIODCODE=:goods
		and    g.GIODORG=:giodorg
		) GoodsStock
		order by giodcode desc
    ]]> 
    </sql-query>
    <sql-query name="GoodsStockDAO.goodsStockAllDetail">
    <![CDATA[
		select GoodsStock.gid, GoodsStock.giodcode, GoodsStock.giodname, GoodsStock.giodinnum, GoodsStock.giodoutnum, 
		GoodsStock.giodnum,GoodsStock.type,GoodsStock.giodtime
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(cast(g.GIODID as varchar))) as gid, g.GIODCODE as giodcode, g.GIODNAME as giodname, g.GIODTYPE as type,
		g.GIODINNUM as giodinnum,
		'0' as giodoutnum, 
		g.GSNUM as giodnum,
		g.GIODTIME as giodtime
		FROM ginoutstockdetail g
		where substr(g.GIODTIME,1,7)=:edate
		and    g.GIODORG=:giodorg
		) GoodsStock
		order by  giodname desc,giodtime desc
    ]]> 
    </sql-query>
    <sql-query name="SingleGoodsStockDAO.singleGoodsStockFTG">
    <![CDATA[
		select SingleGoodsStock.*
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(char(g.GIODID))) as giodtime, g.GIODTYPE as giodtype, g.GIODINNUM as giodinnum, 
		'0' as giodoutnum, 
		g.GSNUM as giodnum, gk.rid
		FROM ginoutstockdetail g, GOUTSTOCK gk
		where g.goid=gk.goid
		and g.GIODCODE=:giodcode
		and g.GIODORG=:giodorg
		and g.GIODCATEGORY=:giodcategory
		and substr(g.giodtime,1,10)>=:etime_from
		and substr(g.giodtime,1,10)<=:etime_to
		) as SingleGoodsStock
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="SingleGoodsStockDAO.singleGoodsStockG">
    <![CDATA[
		select SingleGoodsStock.*
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(char(g.GIODID))) as giodtime, g.GIODTYPE as giodtype, g.GIODINNUM as giodinnum, 
		'0' as giodoutnum, 
		g.GSNUM as giodnum, gk.rid
		FROM ginoutstockdetail g, GOUTSTOCK gk
		where g.goid=gk.goid
		and g.GIODCODE=:giodcode
		and g.GIODORG=:giodorg
		and g.GIODCATEGORY=:giodcategory
		) as SingleGoodsStock
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="SingleGoodsStockDAO.singleGoodsStockFG">
    <![CDATA[
		select SingleGoodsStock.*
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(char(g.GIODID))) as giodtime, g.GIODTYPE as giodtype, g.GIODINNUM as giodinnum, 
		'0' as giodoutnum, 
		g.GSNUM as giodnum, gk.rid
		FROM ginoutstockdetail g, GOUTSTOCK gk
		where g.goid=gk.goid
		and g.GIODCODE=:giodcode
		and g.GIODORG=:giodorg
		and g.GIODCATEGORY=:giodcategory
		and substr(g.giodtime,1,10)>=:etime_from
		) as SingleGoodsStock
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="SingleGoodsStockDAO.singleGoodsStockTG">
    <![CDATA[
		select SingleGoodsStock.*
		from
		(SELECT concat(g.GIODTIME||'-',rtrim(char(g.GIODID))) as giodtime, g.GIODTYPE as giodtype, g.GIODINNUM as giodinnum, 
		'0' as giodoutnum, 
		g.GSNUM as giodnum, gk.rid
		FROM ginoutstockdetail g, GOUTSTOCK gk
		where g.goid=gk.goid
		and g.GIODCODE=:giodcode
		and g.GIODORG=:giodorg
		and g.GIODCATEGORY=:giodcategory
		and substr(g.giodtime,1,10)<=:etime_to
		) as SingleGoodsStock
		order by 1
    ]]> 
    </sql-query>
    
    <sql-query name="PersonLoanSummaryVWDAO.findByCond">
    <![CDATA[
		SELECT A.LPDUSER,A.lpduserorg,SUM(CASE WHEN A.LPDTYPE = '0' THEN A.LPDAMOUNT ELSE 0 END) AS LOANAMOUNT,
		SUM(CASE WHEN A.LPDTYPE = '1' AND (B.LPDSTATUS = '4' OR B.LPDSTATUS = '5') THEN A.LPDAMOUNT ELSE 0 END) AS PAYAMOUNT,
		SUM(CASE WHEN A.LPDTYPE = '2' AND (B.LPDSTATUS = '4' OR B.LPDSTATUS = '5') THEN A.LPDINVOICEAMOUNT ELSE 0 END) AS INVOICEAMOUNT
		 FROM LOANPAYDETAIL A
		 LEFT OUTER JOIN LOANPAYDETAIL B ON (A.LDID = B.LPDID)
		 WHERE A.LPDSTATUS != '3'
    ]]> 
    </sql-query>
    
    <sql-query name="PersonLoanDetailVWDAO.findByCond1">
    <![CDATA[
		 SELECT A.LPDID AS ID,A.LPDDATE AS DATE,'2' AS TYPE,A.LPDAMOUNT AS AMOUNT,0 AS INVOICEAMOUNT,A.LPDCOMMENT AS COMMENT,B.TYPENAME AS STATUS,A.LPDUSERORG AS lpduserorg
		 FROM LOANPAYDETAIL A 
		 INNER JOIN (SELECT TYPECODE, TYPENAME FROM ITEMSCODES WHERE SELECTID = '28') B ON (A.LPDSTATUS = B.TYPECODE)
		 WHERE A.LPDTYPE = '0' AND A.LPDUSER = :username AND A.LPDSTATUS != '3'
    ]]> 
    </sql-query>
    <sql-query name="PersonLoanDetailVWDAO.findByCond2">
    <![CDATA[
		 SELECT A.LPDID AS ID,A.LPDDATE AS DATE,'3' AS TYPE,A.LPDAMOUNT AS AMOUNT,A.LPDINVOICEAMOUNT AS INVOICEAMOUNT,A.LPDINVOICECOMMENT AS COMMENT,'' AS STATUS,A.LPDUSERORG AS lpduserorg
		 FROM LOANPAYDETAIL A 
		 INNER JOIN LOANPAYDETAIL B ON (A.LDID = B.LPDID)
		 WHERE A.LPDTYPE != '0' AND A.LPDUSER = :username AND (B.LPDSTATUS = '4' OR B.LPDSTATUS = '5')
    ]]> 
    </sql-query>

    <sql-query name="AdvanceDetailVWDAO.findByCond1">
    <![CDATA[
		SELECT A.ACID AS ID,A.ACINSDATE AS DATE,A.ACINSTIME AS TIME,'1' AS TYPE,A.ACUSERNAME AS USERNAME,A.ACAMOUNT AS AMOUNT,0 AS INVOICEAMOUNT,A.ACSTOCKAMOUNT AS STOCKAMOUNT, B.TYPENAME AS STATUS
		 FROM ADVANCESCOST A
		INNER JOIN (SELECT TYPECODE, TYPENAME FROM ITEMSCODES WHERE SELECTID = '22') B ON (A.ACSTATUS = B.TYPECODE)
		WHERE 1=1 
    ]]> 
    </sql-query>
    <sql-query name="AdvanceDetailVWDAO.findByCond2">
    <![CDATA[
		SELECT A.LPDID AS ID,A.LPDDATE AS DATE,A.LPDTIME AS TIME,'2' AS TYPE,A.LPDUSER AS USERNAME,A.LPDAMOUNT AS AMOUNT,0 AS INVOICEAMOUNT,A.LPDSTOCKAMOUNT AS STOCKAMOUNT,B.TYPENAME AS STATUS
		 FROM LOANPAYDETAIL A 
		 INNER JOIN (SELECT TYPECODE, TYPENAME FROM ITEMSCODES WHERE SELECTID = '28') B ON (A.LPDSTATUS = B.TYPECODE)
		 WHERE A.LPDTYPE = '0' AND A.LPDSTATUS != '1' AND A.LPDSTATUS != '3'
    ]]> 
    </sql-query>
    <sql-query name="AdvanceDetailVWDAO.findByCond3">
    <![CDATA[
		SELECT A.LPDID AS ID,A.LPDDATE AS DATE,A.LPDTIME AS TIME,'3' AS TYPE,A.LPDUSER AS USERNAME,A.LPDAMOUNT AS AMOUNT,A.LPDINVOICEAMOUNT AS INVOICEAMOUNT,A.LPDSTOCKAMOUNT AS STOCKAMOUNT,'' AS STATUS
		 FROM LOANPAYDETAIL A 
		 INNER JOIN LOANPAYDETAIL B ON (A.LDID = B.LPDID)
		 WHERE A.LPDTYPE != '0' AND (B.LPDSTATUS = '4' OR B.LPDSTATUS = '5')
    ]]> 
    </sql-query>
    
    <sql-query name="GstockVWDAO.ig0213action">
    <![CDATA[
     select gstock.* 
     from(
		 SELECT  
		    B.GSID,
            B.GSNUM,
            B.GSORG,
            B.GSAVGPRICE,
            B.GSFREEZENUM,
            
    		A.GID,
            A.GCATEGORY, 
            A.GNAME, 
            A.GCODE, 
            A.GWARNINGNUM, 
            A.GPRICE,
            A.GSTATUS

	    FROM  GStock B,Goods A where A.GCATEGORY = B.GSCATEGORY and A.GCODE = B.GSCODE 

    ]]> 
    </sql-query>
    
    <sql-query name="RecptionVWInfoDAO.recptionVW">
    <![CDATA[
    SELECT VW.*
		FROM (
		 SELECT A.MONTH, 
	            (CASE WHEN RNUM IS NULL THEN 0 ELSE RNUM END) AS RNUM, 
	            (CASE WHEN AMOUNT IS NULL THEN 0 ELSE AMOUNT END) AS AMOUNT 
		   FROM  
				(SELECT CID AS MONTH FROM CODEDETAIL WHERE CCID = '151') A
		   LEFT OUTER JOIN (
			    SELECT SUBSTR(RP.RSTIME,6,2) AS MONTH, COUNT(RP.RID) AS RNUM , 
			           SUM((CASE WHEN A IS NULL THEN 0 ELSE A END)  +
	                       (CASE WHEN B IS NULL THEN 0 ELSE B END) + 
	                       (CASE WHEN C IS NULL THEN 0 ELSE C END)+
	                       (CASE WHEN RP.RLODGECOST IS NULL THEN 0 ELSE RP.RLODGECOST END)) AS AMOUNT 
			      FROM RECPTION AS RP
			      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
			      LEFT OUTER JOIN (SELECT RID, SUM(CASE WHEN LPDSTATUS = '3' OR  LPDSTATUS IS NULL OR LPDSTATUS = '' THEN 0 ELSE LPDAMOUNT END) AS B FROM LOANPAYDETAIL GROUP BY RID) AS LPD ON LPD.RID = RP.RID
			      LEFT OUTER JOIN (SELECT RID, SUM(((CASE WHEN EETABLEPRICE*EETABLENUM IS NULL THEN 0 ELSE EETABLEPRICE*EETABLENUM END) + (CASE WHEN EESMOKEPRICE IS NULL THEN 0 ELSE EESMOKEPRICE END) + (CASE WHEN EEDRINKPRICE IS NULL THEN 0 ELSE EEDRINKPRICE END) + (CASE WHEN EEOTHERPRICE IS NULL THEN 0 ELSE EEOTHERPRICE END))) AS C FROM EENTERTAINMENT GROUP BY RID) AS EE ON EE.RID = RP.RID
				 WHERE SUBSTR(RP.RSTIME,1,4) = :year
				GROUP BY SUBSTR(RP.RSTIME,6,2)
				) B ON A.MONTH = B.MONTH 
				ORDER BY A.MONTH ) AS VW
		 
    ]]> 
    </sql-query>
    
    <!-- 外出就餐月度汇总查询   add by  tangxiaona -->
    <sql-query name="DealVWInfoDAO.dealVW">
    <![CDATA[
     SELECT VW.*
		FROM (
		 SELECT A.MONTH, 
	            (CASE WHEN RNUM IS NULL THEN 0 ELSE RNUM END) AS RNUM, 
	            (CASE WHEN AMOUNT IS NULL THEN 0 ELSE AMOUNT END) AS AMOUNT 
		   FROM  
				(SELECT CID AS MONTH FROM CODEDETAIL WHERE CCID = '151') A
		   LEFT OUTER JOIN (
			    SELECT SUBSTR(RP.DEALTIME,6,2) AS MONTH, COUNT(RP.RID) AS RNUM , 
			           SUM((CASE WHEN A IS NULL THEN 0 ELSE A END)  +
	                      
	                       (CASE WHEN RP.DEALCASH IS NULL THEN 0 ELSE RP.DEALCASH END)) AS AMOUNT 
			      FROM DEAL AS RP
			      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
				 WHERE SUBSTR(RP.DEALTIME,1,4) = :year
				GROUP BY SUBSTR(RP.DEALTIME,6,2)
				) B ON A.MONTH = B.MONTH 
				ORDER BY A.MONTH ) AS VW
		 
    ]]> 
    </sql-query>
    
    
    
    <sql-query name="RecptionOrgVWDAO.recptionOrgVW">
    <![CDATA[
    SELECT RECPTIONORGVW.*
		FROM (
		    		    SELECT RP.RAPPORGID RAPPORGID, ORG.ORGNAME RAPPORGNAME,COUNT(RP.RID) AS RNUM , 
                               COUNT(CASE WHEN RP.RSTATUS = '2' THEN RP.RSTATUS ELSE NULL END) AS DISNUM,
                               COUNT(CASE WHEN RP.RSTATUS = '1' THEN RP.RSTATUS ELSE NULL END) AS ENNUM,
		           			   SUM((CASE WHEN A IS NULL THEN 0 ELSE A END)  +
			                       (CASE WHEN B IS NULL THEN 0 ELSE B END) + 
			                       (CASE WHEN C IS NULL THEN 0 ELSE C END)+
			                       (CASE WHEN RP.RLODGECOST IS NULL THEN 0 ELSE RP.RLODGECOST END)) AS AMOUNT 
		      FROM RECPTION AS RP
              LEFT OUTER JOIN organization AS ORG ON ORG.ORGSYSCODING = RP.RAPPORGID
		      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
		      LEFT OUTER JOIN (SELECT RID, SUM(CASE WHEN LPDSTATUS = '3' OR  LPDSTATUS IS NULL OR LPDSTATUS = '' THEN 0 ELSE LPDAMOUNT END) AS B FROM LOANPAYDETAIL GROUP BY RID) AS LPD ON LPD.RID = RP.RID
		      LEFT OUTER JOIN (SELECT RID, SUM(((CASE WHEN EETABLEPRICE*EETABLENUM IS NULL THEN 0 ELSE EETABLEPRICE*EETABLENUM END) + (CASE WHEN EESMOKEPRICE IS NULL THEN 0 ELSE EESMOKEPRICE END) + (CASE WHEN EEDRINKPRICE IS NULL THEN 0 ELSE EEDRINKPRICE END) + (CASE WHEN EEOTHERPRICE IS NULL THEN 0 ELSE EEOTHERPRICE END))) AS C FROM EENTERTAINMENT GROUP BY RID) AS EE ON EE.RID = RP.RID
		 	 			WHERE SUBSTR(RP.RSTIME,1,4) = :year 
		 	 			AND SUBSTR(RP.RSTIME,6,2) >= :month_from 
		 	 			AND SUBSTR(RP.RSTIME,6,2) <= :month_to
		 
    ]]> 
    </sql-query>
    <!-- 部門外出就餐統計查詢 -->
    <sql-query name="DealOrgVWDAO.dealOrgVW">
    <![CDATA[
   SELECT RECPTIONORGVW.*
	FROM (
                              SELECT RP.RAPPORGID RAPPORGID, ORG.ORGNAME RAPPORGNAME,COUNT(RP.RID) AS RNUM , 
                               COUNT(CASE WHEN RP.RSTATUS = '2' THEN RP.RSTATUS ELSE NULL END) AS DISNUM,
                               COUNT(CASE WHEN RP.RSTATUS = '1' THEN RP.RSTATUS ELSE NULL END) AS ENNUM,
	         SUM((CASE WHEN A IS NULL THEN 0 ELSE A END)  + (CASE WHEN RP.DEALCASH IS NULL THEN 0 ELSE RP.DEALCASH END)) AS AMOUNT 
		      FROM DEAL AS RP
                      LEFT OUTER JOIN organization AS ORG ON ORG.ORGSYSCODING = RP.RAPPORGID
		      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
		 	 WHERE SUBSTR(RP.DEALTIME,1,4) = :year
		 	 AND SUBSTR(RP.DEALTIME,6,2) >=:month_from 
		 	 AND SUBSTR(RP.DEALTIME,6,2) <= :month_to
                                                             
		 
    ]]> 
    </sql-query>
    
    <sql-query name="RecptionDAO.RecptionInfo">
    <![CDATA[
        SELECT  R.RID AS RID,RG.RGID AS RGID,  R.RNAME AS RNAME, R.RAPPORGID AS RAPPORGID, R.RETIME AS RETIME,
               R.RSTIME AS RSTIME,R.RSTATUS AS RSTATUS,RG.RGUNIT AS RGUNIT,RG.RGNAME AS RGNAME
		FROM RECPTION R,RECPTIONGUEST RG  WHERE RG.RID = R.RID 
		 
    ]]> 
    </sql-query>
    
    <sql-query name="RecptionCostVWDAO.RecptionCost">
    <![CDATA[
       SELECT RP.RID,RP.RNAME,RP.RDATE,RP.RETIME,RP.RSTIME,RP.RSTATUS,RP.RAPPORGID,(CASE WHEN A IS NULL THEN 0 ELSE A END) STOCKSUM,
              (CASE WHEN B IS NULL THEN 0 ELSE B END) LOANSUM, (CASE WHEN C IS NULL THEN 0 ELSE C END)  ENTERTAINMENTSUM,
              (CASE WHEN RP.RLODGECOST IS NULL THEN 0 ELSE RP.RLODGECOST END) AS COST
       FROM RECPTION AS RP
              LEFT OUTER JOIN ORGANIZATION AS ORG ON ORG.ORGSYSCODING = RP.RAPPORGID
		      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
		      LEFT OUTER JOIN (SELECT RID, SUM(CASE WHEN LPDSTATUS = '3' OR  LPDSTATUS IS NULL OR LPDSTATUS = '' THEN 0 ELSE LPDAMOUNT END) AS B FROM LOANPAYDETAIL GROUP BY RID) AS LPD ON LPD.RID = RP.RID
		      LEFT OUTER JOIN (SELECT RID, 
		      SUM(((CASE WHEN EETABLEPRICE*EETABLENUM IS NULL THEN 0 ELSE EETABLEPRICE*EETABLENUM END) + 
		      (CASE WHEN EESMOKEPRICE IS NULL THEN 0 ELSE EESMOKEPRICE END) + 
		      (CASE WHEN EEDRINKPRICE IS NULL THEN 0 ELSE EEDRINKPRICE END) + 
		      (CASE WHEN EEOTHERPRICE IS NULL THEN 0 ELSE EEOTHERPRICE END))) AS C FROM EENTERTAINMENT GROUP BY RID) AS EE ON EE.RID = RP.RID
		 WHERE 1=1 
    ]]> 
    </sql-query>
    
    <sql-query name="RecptionAmountDAO.recptionAmount">
    <![CDATA[
 
       SELECT RP.RID,RP.RNAME,RP.RSCALE,RP.RSTANDARD,RP.RSTATUS,RP.RAPPORGID, ORG.ORGNAME RAPPORGNAME, ORG.ORGSYSCODING,
       		  RP.RSTIME,RP.RETIME,
       		  ((CASE WHEN A IS NULL THEN 0 ELSE A END) +
              (CASE WHEN C IS NULL THEN 0 ELSE C END) +
              (CASE WHEN RP.RLODGECOST IS NULL THEN 0 ELSE RP.RLODGECOST END)) AMOUNT 
       FROM RECPTION AS RP
              LEFT OUTER JOIN ORGANIZATION AS ORG ON ORG.ORGSYSCODING = RP.RAPPORGID
		      LEFT OUTER JOIN (SELECT RID, SUM(GOOUTPRICE *GOINNUM) AS A FROM GOUTSTOCK GROUP BY RID) AS GS ON GS.RID = RP.RID
		      LEFT OUTER JOIN (SELECT RID, 
		      SUM(((CASE WHEN EETABLEPRICE*EETABLENUM IS NULL THEN 0 ELSE EETABLEPRICE*EETABLENUM END) + 
		      (CASE WHEN EESMOKEPRICE IS NULL THEN 0 ELSE EESMOKEPRICE END) + 
		      (CASE WHEN EEDRINKPRICE IS NULL THEN 0 ELSE EEDRINKPRICE END) + 
		      (CASE WHEN EEOTHERPRICE IS NULL THEN 0 ELSE EEOTHERPRICE END))) AS C FROM EENTERTAINMENT GROUP BY RID) AS EE ON EE.RID = RP.RID
		 WHERE 1=1 
    ]]> 
    </sql-query>
    
    
    <!-- 每月盘点（按left join顺序上月结存、本月购入、本月领用、本月调剂、本月核销） -->
    <sql-query name="InventoryInfoDAO.inventoryInfo">
    <![CDATA[
    
		SELECT INID, INVENTORYDATE, GOODSNAME, GOODSCATEGORY, 
				 		GOODSCODE, LMINVENTORYAMOUNT, LMINVENTORYMONEY, CMINPUTAMOUNT, CMINPUTMONEY, 
				 		(((CASE WHEN LMINVENTORYMONEY IS NULL THEN 0 ELSE LMINVENTORYMONEY END) + 
				 		  (CASE WHEN CMINPUTMONEY IS NULL THEN 0 ELSE CMINPUTMONEY END) + 
				 		  (CASE WHEN CMOUTMONEY IS NULL THEN 0 ELSE CMOUTMONEY END) + 
				 		  (CASE WHEN CMREGMONEY IS NULL THEN 0 ELSE CMREGMONEY END) + 
				 		  (CASE WHEN CMHAVOMONEY IS NULL THEN 0 ELSE CMHAVOMONEY END) + 
				 		  (CASE WHEN CMSURPLUSMONEY IS NULL THEN 0 ELSE CMSURPLUSMONEY END))/
				 		 ((CASE WHEN LMINVENTORYAMOUNT IS NULL THEN 0 ELSE LMINVENTORYAMOUNT END) + 
				 		  (CASE WHEN CMINPUTAMOUNT IS NULL THEN 0 ELSE CMINPUTAMOUNT END) + 
				 		  (CASE WHEN CMOUTAMOUNT IS NULL THEN 0 ELSE CMOUTAMOUNT END) + 
				 		  (CASE WHEN CMREGAMOUNT IS NULL THEN 0 ELSE CMREGAMOUNT END) +
				 		  (CASE WHEN CMHAVOAMOUNT IS NULL THEN 0 ELSE CMHAVOAMOUNT END) +
						(CASE WHEN CMSURPLUSAMOUNT IS NULL THEN 0 ELSE CMSURPLUSAMOUNT END))) AS AVERAGE, 
				 		CMOUTAMOUNT, CMOUTMONEY, CMREGAMOUNT, CMREGMONEY, CMHAVOAMOUNT, CMHAVOMONEY, CMSURPLUSAMOUNT, CMSURPLUSMONEY  
		from(
		     	 		
				SELECT GS.GSID as INID, INV.INVENTORYDATE, GS.GSNAME AS GOODSNAME, GS.GSCATEGORY AS GOODSCATEGORY, 
					 		GS.GSCODE AS GOODSCODE, INV.LMINVENTORYAMOUNT, INV.LMINVENTORYMONEY, GI.CMINPUTAMOUNT, GI.CMINPUTMONEY, 
					 		
					 		GOL.CMOUTAMOUNT, GOL.CMOUTMONEY, GOR.CMREGAMOUNT, GOR.CMREGMONEY, GOH.CMHAVOAMOUNT, GOH.CMHAVOMONEY, 
					        ((CASE WHEN INV.LMINVENTORYAMOUNT IS NULL THEN 0 ELSE INV.LMINVENTORYAMOUNT END) + 
					         (CASE WHEN GI.CMINPUTAMOUNT IS NULL THEN 0 ELSE GI.CMINPUTAMOUNT END) - 
					         (CASE WHEN GOL.CMOUTAMOUNT IS NULL THEN 0 ELSE GOL.CMOUTAMOUNT END) - 
					         (CASE WHEN GOR.CMREGAMOUNT IS NULL THEN 0 ELSE GOR.CMREGAMOUNT END) - 
					         (CASE WHEN GOH.CMHAVOAMOUNT IS NULL THEN 0 ELSE GOH.CMHAVOAMOUNT END)) AS CMSURPLUSAMOUNT,
					        ((CASE WHEN INV.LMINVENTORYMONEY IS NULL THEN 0 ELSE INV.LMINVENTORYMONEY END) + 
					         (CASE WHEN GI.CMINPUTMONEY IS NULL THEN 0 ELSE GI.CMINPUTMONEY END) - 
					         (CASE WHEN GOL.CMOUTMONEY IS NULL THEN 0 ELSE GOL.CMOUTMONEY END) - 
					         (CASE WHEN GOR.CMREGMONEY IS NULL THEN 0 ELSE GOR.CMREGMONEY END) - 
					         (CASE WHEN GOH.CMHAVOMONEY IS NULL THEN 0 ELSE GOH.CMHAVOMONEY END)) AS CMSURPLUSMONEY  
				
					  FROM GSTOCK AS GS
				 	  LEFT JOIN (SELECT INVENTORYDATE, GOODSCATEGORY, GOODSCODE, SUM(CMSURPLUSAMOUNT) AS LMINVENTORYAMOUNT, SUM(CMSURPLUSMONEY) AS LMINVENTORYMONEY  
									FROM INVENTORY 
									WHERE INVENTORYDATE = :predate_from 
								   	GROUP BY GOODSCATEGORY, GOODSCODE, INVENTORYDATE) AS INV ON GS.GSCATEGORY = INV.GOODSCATEGORY AND GS.GSCODE = INV.GOODSCODE 
				 	  LEFT JOIN (SELECT GIODCATEGORY, GIODCODE, SUM(GIODINNUM) AS CMINPUTAMOUNT, SUM(GIODINNUM * GIODINPRICE) AS CMINPUTMONEY  
								  	FROM ginoutstockdetail 
									WHERE GIODTIME >= :date_from AND GIODTIME <= :date_to AND GIODTYPE = '0'
								 	GROUP BY GIODCATEGORY, GIODCODE) AS GI ON GS.GSCATEGORY = GI.GIODCATEGORY AND GS.GSCODE = GI.GIODCODE 
					  LEFT JOIN (SELECT GOCATEGORY, GOCODE, SUM(GOINNUM) AS CMOUTAMOUNT, SUM(GOINNUM * GOOUTPRICE) AS CMOUTMONEY
								  	FROM GOUTSTOCK 
									WHERE GOTIME >= :date_from AND GOTIME <= :date_to AND GOTYPE = '1'
								 	GROUP BY GOCATEGORY, GOCODE) AS GOL ON GS.GSCATEGORY = GOL.GOCATEGORY AND GS.GSCODE = GOL.GOCODE 
					  LEFT JOIN (SELECT GOCATEGORY, GOCODE, SUM(GOINNUM) AS CMREGAMOUNT, SUM(GOINNUM * GOOUTPRICE) AS CMREGMONEY 
								  	FROM GOUTSTOCK 
									WHERE GOTIME >= :date_from AND GOTIME <= :date_to AND GOTYPE = '2'
								 	GROUP BY GOCATEGORY, GOCODE) AS GOR ON GS.GSCATEGORY = GOR.GOCATEGORY AND GS.GSCODE = GOR.GOCODE 
					  LEFT JOIN (SELECT GOCATEGORY, GOCODE, SUM(GOINNUM) AS CMHAVOAMOUNT, SUM(GOINNUM * GOOUTPRICE) AS CMHAVOMONEY 
								  	FROM GOUTSTOCK 
									WHERE GOTIME >= :date_from AND GOTIME <= :date_to AND GOTYPE = '3' AND GOSTATUS = '0'
								 	GROUP BY GOCATEGORY, GOCODE) AS GOH ON GS.GSCATEGORY = GOH.GOCATEGORY AND GS.GSCODE = GOH.GOCODE 
					WHERE GS.GSORG = :org
					ORDER BY GS.GSCATEGORY, GS.GSNAME
		
		) AS inventoryInfo
		    
    	 		
						
    ]]> 
    </sql-query>
    
    <!-- 食堂招待部门汇总 -->
    <sql-query name="EEOrgVWDAO.eeOrgVW">
    <![CDATA[
   select EEORGVWSQL.* 
   from

      (
         select EEORGVW.rapporgname,EEORGVW.rnum,EEORGVW.amount,oo.orgsyscoding as rapporgid
         from ORGANIZATION oo,
         (select o.orgname as  rapporgname, count( e.eeid) as rnum,
            sum(
            (case when e.eetableprice is null then 0 else  e.eetableprice end )*(case when e.eetablenum is null then 0 else e.eetablenum end)+
            (case when e.eedrinkprice is null then 0 else e.eedrinkprice end)+
            (case when e.eesmokeprice is null then 0 else e.eesmokeprice end )+
            (case when e.eeotherprice is null then 0 else e.eeotherprice end ) ) as AMOUNT
            from RECPTION r,
                 ORGANIZATION o,
                 EENTERTAINMENT e
            where o.orgsyscoding=r.rapporgid
            AND e.rid=r.rid
            AND SUBSTR(E.EEDATE,1,4) = :year
            AND SUBSTR(E.EEDATE,6,2) >=:month_from
            AND SUBSTR(E.EEDATE,6,2) <= :month_to
            
                                                 
		 
    ]]> 
    </sql-query>
    
     <!-- 食堂招待部门汇总明细 -->
    <sql-query name="EEOrgVWDAO.eedtail">
    <![CDATA[
        select eedetail.* from
        (
         select ee.eeid,ee.rid,ee.eeuser,ee.eetableprice,ee.eetablenum,ee.eedrinkprice,ee.eesmokeprice,ee.eeotherprice,ee.eedate,RR.RNAME,OO.ORGNAME
         
         from EENTERTAINMENT ee,
                 RECPTION RR,
                  ORGANIZATION OO
         where ee.rid in
        (
         select re.rid
         from RECPTION re
         where re.rapporgid= :rapporgid_org  ) 
         AND SUBSTR(EE.EEDATE,1,4) =:year_org
         AND SUBSTR(EE.EEDATE,6,2) >=:month_from_org
         AND SUBSTR(EE.EEDATE,6,2) <=:month_to_org
         AND RR.RID=EE.RID
         AND OO.ORGSYSCODING=RR.RAPPORGID
         order by ee.eedate
         )eedetail                                           
		 
    ]]> 
    </sql-query>
    <!-- 食堂物品消耗明细 -->
    <sql-query name="GoutDetailInfoDAO.getGoutDetailInfo">
    <![CDATA[
         SELECT  GOUTDETAILINFO.* FROM(
          select gg.gotime,
                 gg. gorequsername,
                 gg.goid,
                 gg.goname,
                 gg.gocode,
                 gg.goinnum,
                 rr.rname,
                 gg.rid
          from GOUTSTOCK gg
          LEFT OUTER JOIN   RECPTION  rr
          ON gg.rid=rr.rid
          WHERE GG.GOORG='STORG'
          AND SUBSTR(GG.GOTIME,1,4) =:year
          AND SUBSTR(GG.GOTIME,6,2) >=:month_from
          AND SUBSTR(GG.GOTIME,6,2) <=:month_to
                                               	 
    ]]> 
    </sql-query>
    
</hibernate-mapping>