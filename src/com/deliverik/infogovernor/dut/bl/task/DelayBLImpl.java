/*
 * 北京递蓝科软件技术有限公司版权所有，保留所有权利。
 */

package com.deliverik.infogovernor.dut.bl.task;

import java.util.List;

import com.deliverik.framework.base.BLException;
import com.deliverik.framework.base.BaseBLImpl;
import com.deliverik.infogovernor.dut.model.DelayInfo;
import com.deliverik.infogovernor.dut.model.condition.DelaySearchCond;
import com.deliverik.infogovernor.dut.model.dao.DelayDAO;
import com.deliverik.infogovernor.dut.model.entity.DelayTB;

/**
  * 概述: 延时解锁信息表业务逻辑实现
  * 功能描述: 延时解锁信息表业务逻辑实现
  * 创建记录: 2012/04/05
  * 修改记录: 
  */
public class DelayBLImpl extends BaseBLImpl implements
		DelayBL {

	/** 延时解锁信息表DAO接口 */
	protected DelayDAO delayDAO;
	
	/**
	 * 延时解锁信息表DAO接口设定
	 *
	 * @param delayDAO 延时解锁信息表DAO接口
	 */
	public void setDelayDAO(DelayDAO delayDAO) {
		this.delayDAO = delayDAO;
	}

	/**
	 * 延时解锁信息表实例取得
	 *
	 * @return 延时解锁信息表实例
	 */
	public DelayTB getDelayTBInstance() {
		return new DelayTB();
	}

	/**
	 * 全件检索
	 *
	 * @return 检索结果集
	 */
	public List<DelayInfo> searchDelay() {
		return delayDAO.findAll();
	}

	/**
	 * 主键检索处理
	 *
	 * @param pk 主键
	 * @return 检索结果
	 */
	public DelayInfo searchDelayByPK(Integer pk)
		throws BLException {
		return checkExistInstance(pk);
	}

	/**
	 * 条件检索结果件数取得
	 *
	 * @param cond 检索条件
	 * @return 检索结果件数
	 */
	public int getSearchCount(DelaySearchCond cond) {
		return delayDAO.getSearchCount(cond);
	}

	/**
	 * 条件检索处理
	 *
	 * @param cond 检索条件
	 * @return 检索结果列表
	 */
	public List<DelayInfo> searchDelay(
			DelaySearchCond cond) {
		return delayDAO.findByCond(cond, 0, 0);
	}

	/**
	 * 条件检索处理
	 *
	 * @param cond 检索条件
	 * @param start 检索记录起始行号
	 * @param count 检索记录件数
	 * @return 检索结果列表
	 */
	public List<DelayInfo> searchDelay(
			DelaySearchCond cond, int start,
			int count) {
		return delayDAO.findByCond(cond, start, count);
	}

	/**
	 * 新增处理
	 *
	 * @param instance 新增实例
	 * @return 新增实例
	 */
	public DelayInfo registDelay(DelayInfo instance)
		throws BLException {
		return delayDAO.save(instance);
	}

	/**
	 * 修改处理
	 *
	 * @param instance 修改实例
	 * @return 修改实例
	 */
	public DelayInfo updateDelay(DelayInfo instance)
		throws BLException {
		checkExistInstance(instance.getId());
		return delayDAO.save(instance);
	}

	/**
	 * 删除处理
	 *
	 * @param pk 主键
	 */
	public void deleteDelayByPK(Integer pk)
		throws BLException {
		delayDAO.delete(checkExistInstance(pk));
	}

	/**
	 * 删除处理
	 *
	 * @param instance 删除实例
	 */
	public void deleteDelay(DelayInfo instance)
		throws BLException {
		delayDAO.delete(instance);
	}

	/**
	 * 实例存在检查处理
	 *
	 * @param pk 主键
	 * @return 实例
	 */
	public DelayInfo checkExistInstance(Integer pk)
		throws BLException {
		DelayInfo instance = delayDAO.findByPK(pk);
		if (instance == null) {
			throw new BLException("IGCO10000.E004", "实例基本");
		}
		return instance;
	}

}