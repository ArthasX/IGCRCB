/*
 * 北京递蓝科软件技术有限公司版权所有，保留所有权利。
 */

package com.deliverik.infogovernor.rpt.bl.task;

import java.util.List;

import com.deliverik.framework.base.BLException;
import com.deliverik.framework.base.BaseBLImpl;
import com.deliverik.infogovernor.rpt.model.SOC0202Info;
import com.deliverik.infogovernor.rpt.model.condition.SOC0202SearchCond;
import com.deliverik.infogovernor.rpt.model.dao.SOC0202DAO;
import com.deliverik.infogovernor.rpt.model.entity.SOC0202TB;

/**
  * 概述: 附加报表业务逻辑实现
  * 功能描述: 附加报表业务逻辑实现
  * 创建记录: 2012/06/06
  * 修改记录: 2012/08/09 将ReportAnnexationBLImpl表名改为SOC0202BLImpl
  */
public class SOC0202BLImpl extends BaseBLImpl implements
		SOC0202BL {

	/** 附加报表DAO接口 */
	protected SOC0202DAO soc0202DAO;
	
	/**
	 * 附加报表DAO接口设定
	 *
	 * @param soc0202DAO 附加报表DAO接口
	 */
	public void setSoc0202DAO(SOC0202DAO soc0202DAO) {
		this.soc0202DAO = soc0202DAO;
	}

	/**
	 * 附加报表实例取得
	 *
	 * @return 附加报表实例
	 */
	public SOC0202TB getSOC0202Instance() {
		return new SOC0202TB();
	}

	/**
	 * 全件检索
	 *
	 * @return 检索结果集
	 */
	public List<SOC0202Info> searchSOC0202() {
		return soc0202DAO.findAll();
	}

	/**
	 * 主键检索处理
	 *
	 * @param pk 主键
	 * @return 检索结果
	 */
	public SOC0202Info searchSOC0202ByPK(Integer pk)
		throws BLException {
		return checkExistInstance(pk);
	}

	/**
	 * 条件检索结果件数取得
	 *
	 * @param cond 检索条件
	 * @return 检索结果件数
	 */
	public int getSearchCount(SOC0202SearchCond cond) {
		return soc0202DAO.getSearchCount(cond);
	}

	/**
	 * 条件检索处理
	 *
	 * @param cond 检索条件
	 * @return 检索结果列表
	 */
	public List<SOC0202Info> searchSOC0202(
			SOC0202SearchCond cond) {
		return soc0202DAO.findByCond(cond, 0, 0);
	}

	/**
	 * 条件检索处理
	 *
	 * @param cond 检索条件
	 * @param start 检索记录起始行号
	 * @param count 检索记录件数
	 * @return 检索结果列表
	 */
	public List<SOC0202Info> searchSOC0202(
			SOC0202SearchCond cond, int start,
			int count) {
		return soc0202DAO.findByCond(cond, start, count);
	}

	/**
	 * 新增处理
	 *
	 * @param instance 新增实例
	 * @return 新增实例
	 */
	public SOC0202Info registSOC0202(SOC0202Info instance)
		throws BLException {
		return soc0202DAO.save(instance);
	}

	/**
	 * 修改处理
	 *
	 * @param instance 修改实例
	 * @return 修改实例
	 */
	public SOC0202Info updateSOC0202(SOC0202Info instance)
		throws BLException {
		checkExistInstance(instance.getRaId());
		return soc0202DAO.save(instance);
	}

	/**
	 * 删除处理
	 *
	 * @param pk 主键
	 */
	public void deleteSOC0202ByPK(Integer pk)
		throws BLException {
		soc0202DAO.delete(checkExistInstance(pk));
	}

	/**
	 * 删除处理
	 *
	 * @param instance 删除实例
	 */
	public void deleteSOC0202(SOC0202Info instance)
		throws BLException {
		soc0202DAO.delete(instance);
	}

	/**
	 * 实例存在检查处理
	 *
	 * @param pk 主键
	 * @return 实例
	 */
	public SOC0202Info checkExistInstance(Integer pk)
		throws BLException {
		SOC0202Info instance = soc0202DAO.findByPK(pk);
		if (instance == null) {
			throw new BLException("IGCO10000.E004", "实例基本");
		}
		return instance;
	}

}