/*
 * 北京递蓝科软件技术有限公司版权所有，保留所有权利。
 */

package com.deliverik.framework.asset.bl.task;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.deliverik.framework.asset.EiRelationKeyWords;
import com.deliverik.framework.asset.model.EiLinkMapInfo;
import com.deliverik.framework.asset.model.condition.EiLinkMapSearchCondImpl;
import com.deliverik.framework.base.BLException;
import com.deliverik.framework.base.BaseBLImpl;

/**
  * 概述: 拓扑图业务逻辑实现
  * 功能描述: 拓扑图业务逻辑实现
  * 创建记录: 2011/04/20
  * 修改记录: 
  */
public class IGDomainGraphBLImpl extends BaseBLImpl implements
	IGDomainGraphBL {

	/** 拓扑图链路信息BL */
	protected EiLinkMapBL eiLinkMapBL;
	
	/**
	 * 拓扑图链路信息BL设定
	 *
	 * @param eiLinkMapBL 拓扑图链路信息BL
	 */
	public void setEiLinkMapBL(EiLinkMapBL eiLinkMapBL) {
		this.eiLinkMapBL = eiLinkMapBL;
	}
	
	/**
	 * 构造节点
	 * 
	 * @param nodeXmlStr 节点XML
	 * @param eiLinkMap 链路上的资产
	 * @param selEiid 高亮的资产ID
	 * @param domainid 域ID
	 * @param domainversion 域版本
	 * @param createtime 快照生成时间
	 */
	private void drawNode(StringBuffer nodeXmlStr, EiLinkMapInfo eiLinkMap, Integer selEiid, 
			Integer domainid, Integer domainversion, String createtime) throws BLException {
		nodeXmlStr.append("<Node ");
		nodeXmlStr.append("id='");
		nodeXmlStr.append(eiLinkMap.getEiid());//节点ID
		nodeXmlStr.append("' eiid='");
		nodeXmlStr.append(eiLinkMap.getEiid());//资产ID
		nodeXmlStr.append("' name='");
		nodeXmlStr.append(TopologyGraph.filterStr(eiLinkMap.getEiname()));//资产名称
		nodeXmlStr.append("' desc='");
		nodeXmlStr.append(TopologyGraph.filterStr(eiLinkMap.getEiname()));//资产名称
		//高亮
		if(eiLinkMap.getEiid().equals(selEiid)){
			nodeXmlStr.append("' nodeColor='0x00FF00' bright='true'");
		} else {
			nodeXmlStr.append("'");
		}
		nodeXmlStr.append(" eiversion='").append(eiLinkMap.getEiversion()).append("'");
		nodeXmlStr.append(" eismallversion='").append(eiLinkMap.getEismallversion()).append("'");
		
		//主机，交换机，存储可以查看关系
		if(eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.HOST) 
				|| eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.SWITCH)
				|| eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.STORAGE)) {
			nodeXmlStr.append(" showRelation='true'");
			nodeXmlStr.append(" domainid='").append(domainid).append("'");
			nodeXmlStr.append(" domainversion='").append(domainversion).append("'");
			nodeXmlStr.append(" createtime='").append(createtime).append("'");
		}
		nodeXmlStr.append(" nodeClass='leaf'");
		nodeXmlStr.append(" nodeIcon='");
		nodeXmlStr.append(eiLinkMap.getEsyscoding());//资产模型层次码
		nodeXmlStr.append("'/>");
	}
	
	/**
	 * 连线
	 * 
	 * @param actionXmlStr 连线XML
	 * @param fromId 起始节点ID
	 * @param to_id 结束节点ID
	 */
	private void drawLine(StringBuffer actionXmlStr, Integer fromId, Integer to_id) {
		actionXmlStr.append("<Edge ");
		actionXmlStr.append("fromID='");
		actionXmlStr.append(fromId);
		actionXmlStr.append("' toID='");
		actionXmlStr.append(to_id);
		actionXmlStr.append("'");
		actionXmlStr.append("/>");
	}
	
	/**
	 * 拓扑图显示初始化处理
	 * 
	 * @param eiid 选中资产ID
	 * @param domainid 域ID
	 * @param domainversion 域版本
	 * @param createtime 创建时间
	 * @return 显示用XML
	 * @throws BLException 
	 * 
	 */
	public String initGraph(Integer eiid, Integer domainid,
			Integer domainversion, String createtime) throws BLException {
		List<EiLinkMapInfo> linkMap = this.searchLinkMap(eiid, domainid, domainversion, createtime);
		return this.createXml(eiid, linkMap, domainid, domainversion, createtime);
	}
	
	/**
	 * 拓扑图链路检索
	 * 
	 * @param eiid 选中资产ID
	 * @param domainid 域ID
	 * @param domainversion 域版本
	 * @param createtime 创建时间
	 * @return 显示用XML
	 * @throws BLException 
	 * 
	 */
	private List<EiLinkMapInfo> searchLinkMap(Integer eiid, Integer domainid,
			Integer domainversion, String createtime) throws BLException {
		EiLinkMapSearchCondImpl cond = new EiLinkMapSearchCondImpl();
		cond.setDomainid_eq(domainid);//域ID
		cond.setDomainversion_eq(domainversion);//域版本
		cond.setCreatetime_eq(createtime);//最新域快照时间
		cond.setLinkflag_eq("1");//有效链路
		return this.eiLinkMapBL.searchEiLinkMap(cond);
	}
	
	/**
	 * 构造显示XML
	 * 
	 * @param eiid 选中资产ID
	 * @param linkMap 链路集合
	 * @param domainid 域ID
	 * @param domainversion 域版本
	 * @param createtime 快照生成时间
	 * @throws BLException 
	 */
	protected String createXml(Integer eiid, List<EiLinkMapInfo> linkMap, 
			Integer domainid, Integer domainversion, String createtime) throws BLException {
		StringBuffer nodeXmlStr = new StringBuffer("<?xml version='1.0' encoding='utf-8'?>");
		nodeXmlStr.append("<TopologyGraph>");
		this.drawRoot(nodeXmlStr);
		this.drawGraph(linkMap, eiid, nodeXmlStr, domainid, domainversion, createtime);
		nodeXmlStr.append("</TopologyGraph>");
		return nodeXmlStr.toString();
	}
	
	/**
	 * 构造根节点
	 * 
	 * @param actionXmlStr 节点XML
	 */
	private void drawRoot(StringBuffer nodeXmlStr) throws BLException {
		nodeXmlStr.append("<Node ");
		nodeXmlStr.append("id='1' ");
		nodeXmlStr.append("name='");
		nodeXmlStr.append("Start");
		nodeXmlStr.append("' desc='");
		nodeXmlStr.append("Start");
		nodeXmlStr.append("' showRelation='false'");
		nodeXmlStr.append(" nodeClass='earth'");
		nodeXmlStr.append(" nodeIcon='");
		nodeXmlStr.append("0");
		nodeXmlStr.append("'/>");
	}
	
	/**
	 * 画拓扑图
	 * 
	 * @param linkMap 链路集合
	 * @param selEiid 选中的资产ID
	 * @param nodeXmlStr 节点XML
	 * @param domainid 域ID
	 * @param domainversion 域版本
	 * @param createtime 快照生成时间
	 * @throws BLException
	 */
	private void drawGraph(List<EiLinkMapInfo> linkMap, Integer selEiid, StringBuffer nodeXmlStr, 
			Integer domainid, Integer domainversion, String createtime) throws BLException {
		StringBuffer actionXmlStr = new StringBuffer();
		//过滤重复的资产
		Set<Integer> eiidSet = new HashSet<Integer>();
		//过滤重复的线
		Set<String> lineSet = new HashSet<String>();
		Integer fromId = 1;
		for(EiLinkMapInfo eiLinkMap : linkMap) {
			//过滤无效路径
//			if("0".equals(eiLinkMap.getLinkflag())) {
//				continue;
//			}
			//不显示DA和DISK
			if(eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.DA)
					|| eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.DISK)) {
				continue;
			}
			//不显示无任何连接的交换机端口
			if(eiLinkMap.getEsyscoding().startsWith(EiRelationKeyWords.SANPORT)
					&& "1".equals(eiLinkMap.getEndflag())) {
				continue;
			}
			if(eiLinkMap.getLinkorder().intValue() == 1) {
				fromId = 1;
			}
			if(!eiidSet.contains(eiLinkMap.getEiid())) {
				//构造节点XML
				this.drawNode(nodeXmlStr, eiLinkMap, selEiid, domainid, domainversion, createtime);
				eiidSet.add(eiLinkMap.getEiid());
			}
			if(!lineSet.contains(fromId.toString() + "-" + eiLinkMap.getEiid().toString())) {
				//构造ActionXML
				this.drawLine(actionXmlStr, fromId, eiLinkMap.getEiid());
				lineSet.add(fromId.toString() + "-" + eiLinkMap.getEiid().toString());
			}
			fromId = eiLinkMap.getEiid();
		}
		
		/*fromId = null;
		for(EiLinkMapInfo eiLinkMap : linkMap) {
			if("1".equals(eiLinkMap.getLinkflag())) {
				continue;
			}
			//不显示主机
			if(EiRelationKeyWords.HOST.equals(eiLinkMap.getEsyscoding())) {
				fromId = eiLinkMap.getEiid();
				continue;
			}
			//不显示HBA卡
			if(EiRelationKeyWords.HBA.equals(eiLinkMap.getEsyscoding())) {
				fromId = eiLinkMap.getEiid();
				continue;
			}
			//不显示HBA端口
			if(EiRelationKeyWords.HBAPORT.equals(eiLinkMap.getEsyscoding())) {
				fromId = eiLinkMap.getEiid();
				continue;
			}
			//不显示交换机
			if(EiRelationKeyWords.SWITCH.equals(eiLinkMap.getEsyscoding())) {
				fromId = eiLinkMap.getEiid();
				continue;
			}
			//不显示交换机端口
			if(EiRelationKeyWords.SANPORT.equals(eiLinkMap.getEsyscoding())) {
				continue;
			}
			//不显示存储
			if(EiRelationKeyWords.STORAGE.equals(eiLinkMap.getEsyscoding())) {
				fromId = eiLinkMap.getEiid();
				continue;
			}
			//不显示前端口
			if(EiRelationKeyWords.FRONTPORT.equals(eiLinkMap.getEsyscoding())) {
				continue;
			}
			//不显示FA
			if(EiRelationKeyWords.FA.equals(eiLinkMap.getEsyscoding())) {
				continue;
			}
			if(!eiidSet.contains(eiLinkMap.getEiid())) {
				//构造节点XML
				this.drawNode(nodeXmlStr, eiLinkMap, selEiid);
				eiidSet.add(eiLinkMap.getEiid());
			}
			if(!lineSet.contains(fromId.toString() + "-" + eiLinkMap.getEiid().toString())) {
				//构造ActionXML
				this.drawLine(actionXmlStr, fromId, eiLinkMap.getEiid());
				lineSet.add(fromId.toString() + "-" + eiLinkMap.getEiid().toString());
			}
			fromId = eiLinkMap.getEiid();
		}*/
		nodeXmlStr.append(actionXmlStr);
	}
	
}